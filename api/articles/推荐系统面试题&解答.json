{"title":"推荐系统面试题&解答","uid":"14735e2960e22dca64c2f7a6c53b0957","slug":"推荐系统面试题&解答","date":"2021-12-15T06:22:35.000Z","updated":"2022-05-18T11:15:56.381Z","comments":true,"path":"api/articles/推荐系统面试题&解答.json","keywords":null,"cover":"https://source.unsplash.com/m_HRfLhgABo/1200x628","content":"<h1 id=\"ML与DL基础\"><a href=\"#ML与DL基础\" class=\"headerlink\" title=\"ML与DL基础\"></a>ML与DL基础</h1><h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><span id=\"more\"></span>\n\n<h3 id=\"介绍下GBDT\"><a href=\"#介绍下GBDT\" class=\"headerlink\" title=\"介绍下GBDT\"></a>介绍下GBDT</h3><ul>\n<li>gbdt 是通过采用加法模型（即基函数的线性组合），以及不断减小训练过程产生的残差来达到将数据分类或者回归的算法， gbdt通过多轮迭代,每轮迭代产生一个弱分类器，每个分类器在上一轮分类器的<strong>残差</strong>基础上进行训练。</li>\n<li>GBDT中的树是回归树（不是分类树），默认选择CART回归树，GBDT用来做回归预测，调整后也可以用于分类。</li>\n<li>核心思想是<strong>利用损失函数的负梯度在当前模型的值作为残差的近似值</strong>，本质上是<strong>对损失函数进行一阶泰勒展开</strong>，从而拟合一个回归树。</li>\n</ul>\n<h3 id=\"介绍XGBoost\"><a href=\"#介绍XGBoost\" class=\"headerlink\" title=\"介绍XGBoost\"></a>介绍XGBoost</h3><ul>\n<li>XGBoost是陈天奇开源的一种梯度提升树模型，是GBDT的一种工程实现。与GBDT最大的区别就是树的生成方式不同，加快了树的生成过程，以生成最优树。</li>\n<li>XGBT相对于GBDT的优化（sklearn中的GBDT实现和传统的有一定改进，同样支持XGBT的一些特性，这里的对比只针对传统GBDT）：<ul>\n<li>正则项：XGBT加入了正则项，控制模型复杂度，防止过拟合，加入的有叶子结点个数正则化、叶子结点输出L2正则化；</li>\n<li>二阶泰勒展开：XGBT对损失函数进行了二阶泰勒展开，加速收敛速度；</li>\n<li>支持更多基学习器：GBDT只支持CART树，XGBT支持多种基学习器，比如线性分类器；</li>\n<li>行采样：传统GBDT每一轮迭代都使用了全部数据，XGBT使用了行采样；</li>\n<li>列采样：传统GBDT同样没有使用列采样，XGBT引入了列采样；</li>\n<li>缺失值处理：GBDT没有缺失值处理机制，XGBT支持缺失值处理；</li>\n<li>Shrinkage：对每一颗树输出进行衰减，削弱单颗树影响，让后续树有更大学习空间；</li>\n<li>并行化：特征粒度的并行化，而非树粒度的，在不同特征上采用多线程并行计算最优分割点；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"介绍下LightGBM\"><a href=\"#介绍下LightGBM\" class=\"headerlink\" title=\"介绍下LightGBM\"></a>介绍下LightGBM</h3><ul>\n<li>LightGBM是微软开源的一个梯度Boosting框架，使用基于决策树的学习算法，是GBDT的一种工程实现，特点是快。</li>\n<li>LGB相对于XGBT的改进：<ul>\n<li>基于直方图的决策树算法：把特征离散到K个bin中构造直方图，遍历一遍特征统计直方图，最后根据直方图寻找最优分割点，这样做的好处是计算速度更快，内存占用更小；</li>\n<li>直方图做差加速：计算兄弟节点的直方图，只需要用父节点直方图-本节点直方图。这样做速度提升了一倍；</li>\n<li>Leaf-wise叶子生长策略：XGBT的Level-wise每次分裂一层节点，容易并行化，但是更容易过拟合，Leaf-wise值分裂增益最大的节点，相对精度更高，过拟合更小；</li>\n<li>直接支持类别特征：第一个直接支持类别特征的GBDT工具，具体算法《On Grouping For Maximum Homogeneity》；</li>\n<li>高效并行优化：数据量小采用特征并行、数据并行，数据量大采用投票并行；</li>\n<li>Cache优化：直方图算法天生提高缓存命中，降低内存消耗；</li>\n<li>单边梯度抽样算法：过滤梯度小的样本，同时平衡了数据分布的改变，这个算法能够提升计算速度；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"LightGBM相对于XGBoost的改进\"><a href=\"#LightGBM相对于XGBoost的改进\" class=\"headerlink\" title=\"LightGBM相对于XGBoost的改进\"></a>LightGBM相对于XGBoost的改进</h3><ul>\n<li>如上</li>\n</ul>\n<h3 id=\"GBDT中的梯度是什么，怎么用\"><a href=\"#GBDT中的梯度是什么，怎么用\" class=\"headerlink\" title=\"GBDT中的梯度是什么，怎么用\"></a>GBDT中的梯度是什么，怎么用</h3><ul>\n<li>在线性模型优化的过程中。利用<strong>梯度下降</strong>我们总是让参数<strong>向负梯度的方向移动</strong>，使损失函数最小。gbdt，假入我们现在有 t 课树，我们需要去学习是第 t+1 颗树，那么如何学习第 t+1 颗树才是最优的树呢？ 这个时候我们参考梯度优化的思想。现在的 t 课树就是我们现在的状态使用这个状态我们可以计算出现在的损失。如何让损失更小呢？我们只需要让 t+1 颗树去拟合损失的负梯度。而<strong>残差</strong> 是梯度在MSE为损失函数下的特例（MSE的导数就是残差）。</li>\n</ul>\n<h3 id=\"GBDT如何计算特征重要性\"><a href=\"#GBDT如何计算特征重要性\" class=\"headerlink\" title=\"GBDT如何计算特征重要性\"></a>GBDT如何计算特征重要性</h3><ul>\n<li>树模型，天生能够利用Gini计算单颗树上特种重要性，然后再在所有树上汇总求平均；</li>\n</ul>\n<h3 id=\"介绍XGBoost中的并行\"><a href=\"#介绍XGBoost中的并行\" class=\"headerlink\" title=\"介绍XGBoost中的并行\"></a>介绍XGBoost中的并行</h3><ul>\n<li>xgboost的<strong>并行是在特征粒度</strong>上的。我们知道，决策树的学习最耗时的一个步骤就是<strong>对特征的值进行排序</strong>（因为要确定最佳分割点），xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么<strong>各个特征的增益计算就可以开多线程进行</strong>。</li>\n</ul>\n<h3 id=\"介绍XGBoost中精确算法与近似算法\"><a href=\"#介绍XGBoost中精确算法与近似算法\" class=\"headerlink\" title=\"介绍XGBoost中精确算法与近似算法\"></a>介绍XGBoost中精确算法与近似算法</h3><ul>\n<li><p>指的是在计算特征分裂的时候，XGBT使用了近似算法</p>\n</li>\n<li><p>精确算法：通过列举所有特征的可能划分找到最优划分解来生成树，该方法<strong>需要排序以形成连续的特征，之后计算每个可能的梯度统计值</strong>。</p>\n<ul>\n<li>缺点：在数据量非常大的情况下，精确基本用不了。一方面在生成树的过程中，每次寻找一个节点最佳分割点时，都需要比较其在所有特征的<strong>所有分割点</strong>上的效果，这么做时间复杂度很高；另一方面，在每次对某个特征进行分割的时候，需要对所有样本根据该特征值进行排序，这需要我们把所有的数据存储在内存中，这会给硬件方面带来很大压力。</li>\n</ul>\n</li>\n<li><p>近似算法：在针对一个特征寻找分割点的时候，我们其实对特征中的值的范围不敏感，只对这些值的顺序敏感。比如数据集中的样本的某一个特征出现的值有12、15、82、107，但是如果我们把这四种值分别替换成1、2、3、4，最后得到的树的结构是不变的。利用这种思想，给出一个数据集中样本的第k个特征和样本点在损失函数上的二阶导数所组成的集合，随后利用数据分布的百分比来定义一个排名函数 ，这个排名函数代表了特征k的值小于z的样本占总样本的比例。我们的目标就是利用这个排名函数来寻找候选分割点集合。</p>\n</li>\n</ul>\n<h3 id=\"XGBoost如何处理空缺值\"><a href=\"#XGBoost如何处理空缺值\" class=\"headerlink\" title=\"XGBoost如何处理空缺值\"></a>XGBoost如何处理空缺值</h3><ul>\n<li>将缺失值分别划分到左子树和右子树，分别计算出左子树和右子树的增益 ，选出更大的，将该方向作为缺失值的分裂方向（记录下来，预测阶段将会使用）。</li>\n<li>LGB使用相同的方法；</li>\n</ul>\n<h3 id=\"为何要进行行采样、列采样\"><a href=\"#为何要进行行采样、列采样\" class=\"headerlink\" title=\"为何要进行行采样、列采样\"></a>为何要进行行采样、列采样</h3><ul>\n<li>简单回答：降低了过拟合</li>\n<li>具体回答：（数学证明）</li>\n</ul>\n<h3 id=\"为什么高维稀疏数据，LR比GBDT要好\"><a href=\"#为什么高维稀疏数据，LR比GBDT要好\" class=\"headerlink\" title=\"为什么高维稀疏数据，LR比GBDT要好\"></a>为什么高维稀疏数据，LR比GBDT要好</h3><ul>\n<li>树模型对稀疏特征，切分的收益非常小，只能从少量非0信息上学习；</li>\n<li>线性模型的正则项是对权重惩罚，树模型是对深度、叶子个数的惩罚。所以高维稀疏数据中，少量样本会对结果产生非常大的影响，非常容易过拟合，而线性模型的权重惩罚能够很好处理这一点。综上，带正则化的线性模型比较不容易对稀疏特征过拟合；</li>\n<li>同样的原因可以解释为什么onehot不适合树模型；</li>\n</ul>\n<h3 id=\"随机森林与GBDT采样的区别\"><a href=\"#随机森林与GBDT采样的区别\" class=\"headerlink\" title=\"随机森林与GBDT采样的区别\"></a>随机森林与GBDT采样的区别</h3><ul>\n<li>RF采用了行列采样，传统GBDT算法没有采用；</li>\n</ul>\n<h3 id=\"随机森林中列采样的作用\"><a href=\"#随机森林中列采样的作用\" class=\"headerlink\" title=\"随机森林中列采样的作用\"></a>随机森林中列采样的作用</h3><ul>\n<li>随机森林在bagging基础上，进一步在训练过程引入随机属性选择，从全集d中随机选择k个属性的子集，利用这个子集来建立本颗子树，下一轮同理；推荐的k&#x3D;log2d</li>\n</ul>\n<h3 id=\"bagging与boosting对比\"><a href=\"#bagging与boosting对比\" class=\"headerlink\" title=\"bagging与boosting对比\"></a>bagging与boosting对比</h3><ul>\n<li><p>boosting：串行的方式训练基分类器，各分类器之间有依赖。每次训练时，对前一层基分类器分错的样本给与更高的权重，更多的关注的是偏差；</p>\n</li>\n<li><p>bagging：是Bootstrap aggregating的意思，各分类器之间无强依赖，可以并行，最终结果进行投票（分类），或者平均（回归）；</p>\n</li>\n<li><p>样本选择上：</p>\n<ul>\n<li><p>Bagging：训练集是在原始集中有放回选取的，从原始集中选出的各轮训练集之间是独立的。</p>\n</li>\n<li><p>Boosting：每一轮的训练集不变，只是训练集中每个样例在分类器中的权重发生变化。而权值是根据上一轮的分类结果进行调整。</p>\n</li>\n</ul>\n</li>\n<li><p>样例权重：</p>\n<ul>\n<li><p>Bagging：使用均匀取样，每个样例的权重相等。</p>\n</li>\n<li><p>Boosting：根据错误率不断调整样例的权值，错误率越大则权重越大。</p>\n</li>\n</ul>\n</li>\n<li><p>预测函数：</p>\n<ul>\n<li><p>Bagging：所有预测函数的权重相等。</p>\n</li>\n<li><p>Boosting：每个弱分类器都有相应的权重，对于分类误差小的分类器会有更大的权重。</p>\n</li>\n</ul>\n</li>\n<li><p>并行计算：</p>\n<ul>\n<li><p>Bagging：各个预测函数可以并行生成。</p>\n</li>\n<li><p>Boosting：各个预测函数只能顺序生成，因为后一个模型参数需要前一轮模型的结果。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"bagging与boosting分别从什么角度降低过拟合\"><a href=\"#bagging与boosting分别从什么角度降低过拟合\" class=\"headerlink\" title=\"bagging与boosting分别从什么角度降低过拟合\"></a>bagging与boosting分别从什么角度降低过拟合</h3><ul>\n<li>bagging降低方差，boosting降低方差</li>\n</ul>\n<h3 id=\"逻辑回归如何避免过拟合\"><a href=\"#逻辑回归如何避免过拟合\" class=\"headerlink\" title=\"逻辑回归如何避免过拟合\"></a>逻辑回归如何避免过拟合</h3><ul>\n<li>更多数据集、数据增强、更多特征；</li>\n<li>权重衰减正则化；</li>\n<li>提前终止；</li>\n</ul>\n<h3 id=\"推导逻辑回归损失函数和损失函数求导\"><a href=\"#推导逻辑回归损失函数和损失函数求导\" class=\"headerlink\" title=\"推导逻辑回归损失函数和损失函数求导\"></a>推导逻辑回归损失函数和损失函数求导</h3><h3 id=\"正则化项L1和L2为什么有用\"><a href=\"#正则化项L1和L2为什么有用\" class=\"headerlink\" title=\"正则化项L1和L2为什么有用\"></a>正则化项L1和L2为什么有用</h3><ul>\n<li>L1正则化和L2正则化可以看做是损失函数的惩罚项。所谓『惩罚』是指对损失函数中的某些参数做一些限制；</li>\n<li>拟合过程中通常都倾向于让权值尽可能小，最后构造一个所有参数都比较小的模型。因为一般认为参数值小的模型比较简单，能适应不同的数据集，也在一定程度上避免了过拟合现象。</li>\n</ul>\n<h3 id=\"l1正则不可导，如何优化\"><a href=\"#l1正则不可导，如何优化\" class=\"headerlink\" title=\"l1正则不可导，如何优化\"></a>l1正则不可导，如何优化</h3><ul>\n<li>在不可导处无法进行梯度下降，此时采用坐标轴下降法：坐标轴下降法是沿着坐标轴的方向，每次固定m-1个数值，对最后一个数值求局部最优解，迭代m次（证明：凸函数在每一个维度都取得最小值，则此处就是全局最小值）；</li>\n<li>同样可以用Proximal operator、admm等方法；</li>\n</ul>\n<h3 id=\"什么样的特征容易产生比较小的权重\"><a href=\"#什么样的特征容易产生比较小的权重\" class=\"headerlink\" title=\"什么样的特征容易产生比较小的权重\"></a>什么样的特征容易产生比较小的权重</h3><ul>\n<li>？</li>\n</ul>\n<h3 id=\"随机森林采样n次，n趋于无穷大，oob样本的概率接近于？\"><a href=\"#随机森林采样n次，n趋于无穷大，oob样本的概率接近于？\" class=\"headerlink\" title=\"随机森林采样n次，n趋于无穷大，oob样本的概率接近于？\"></a>随机森林采样n次，n趋于无穷大，oob样本的概率接近于？</h3><ul>\n<li>1&#x2F;e：limx-&gt;∞（1-1&#x2F;x)^x</li>\n</ul>\n<h3 id=\"逻辑回归与树模型的优缺点\"><a href=\"#逻辑回归与树模型的优缺点\" class=\"headerlink\" title=\"逻辑回归与树模型的优缺点\"></a>逻辑回归与树模型的优缺点</h3><ul>\n<li>树模型<ul>\n<li>可解释性强，比线性模型还强</li>\n<li>拟合能力更强，特别是对非线性数据；</li>\n<li>容易过拟合；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"对于高维稀疏数据，树模型能训练吗？一般怎么处理\"><a href=\"#对于高维稀疏数据，树模型能训练吗？一般怎么处理\" class=\"headerlink\" title=\"对于高维稀疏数据，树模型能训练吗？一般怎么处理\"></a>对于高维稀疏数据，树模型能训练吗？一般怎么处理</h3><ul>\n<li>能训练，但是效果不好，容易过拟合；</li>\n<li>处理方法是：？</li>\n</ul>\n<h3 id=\"树模型一般有哪些参数，分别有什么作用\"><a href=\"#树模型一般有哪些参数，分别有什么作用\" class=\"headerlink\" title=\"树模型一般有哪些参数，分别有什么作用\"></a>树模型一般有哪些参数，分别有什么作用</h3><ul>\n<li>num_leaves: 最大叶子节点个数</li>\n<li>max_depth</li>\n<li>learning_rate</li>\n<li>min_split_gain</li>\n</ul>\n<h3 id=\"随机森林如何处理空缺值\"><a href=\"#随机森林如何处理空缺值\" class=\"headerlink\" title=\"随机森林如何处理空缺值\"></a>随机森林如何处理空缺值</h3><ul>\n<li>随机森林本身没有处理空缺值算法，有些实现中附带了处理空缺值算法；</li>\n<li>数值变量用中位数、类别变量用众数；</li>\n<li>利用无空缺的变量计算相似度后加权计算，类别变量用加权投票，数值变量加权平均；</li>\n</ul>\n<h3 id=\"介绍kmeans，与其他聚类算法的对比\"><a href=\"#介绍kmeans，与其他聚类算法的对比\" class=\"headerlink\" title=\"介绍kmeans，与其他聚类算法的对比\"></a>介绍kmeans，与其他聚类算法的对比</h3><ul>\n<li><p>K-means 是我们最常用的基于欧式距离的聚类算法，其认为两个目标的距离越近，相似度越大；</p>\n</li>\n<li><p>所以 K-means 的算法步骤为：</p>\n<ol>\n<li>选择初始化的 k 个样本作为初始聚类中心 <img src=\"https://www.zhihu.com/equation?tex=a=%7Ba_1,a_2,%E2%80%A6a_k%7D\" alt=\"[公式]\"> ；</li>\n<li>针对数据集中每个样本 <img src=\"https://www.zhihu.com/equation?tex=x_i\" alt=\"[公式]\"> 计算它到 k 个聚类中心的距离并将其分到距离最小的聚类中心所对应的类中；</li>\n<li>针对每个类别 <img src=\"https://www.zhihu.com/equation?tex=a_j\" alt=\"[公式]\"> ，重新计算它的聚类中心 <img src=\"https://www.zhihu.com/equation?tex=a_j=%5Cfrac%7B1%7D%7B%5Cleft%7C+c_i+%5Cright%7C%7D%5Csum_%7Bx%5Cin+c_i%7Dx\" alt=\"[公式]\"> （即属于该类的所有样本的质心）；</li>\n<li>重复上面 2 3 两步操作，直到达到某个中止条件（迭代次数、最小误差变化等）。</li>\n</ol>\n</li>\n<li><p>优点：</p>\n<ul>\n<li>容易理解，聚类效果不错，虽然是局部最优， 但往往局部最优就够了；</li>\n<li>处理大数据集的时候，该算法可以保证较好的伸缩性；</li>\n<li>当簇近似高斯分布的时候，效果非常不错；</li>\n<li>算法复杂度低。</li>\n</ul>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>K 值需要人为设定，不同 K 值得到的结果不一样；</li>\n<li>对初始的簇中心敏感，不同选取方式会得到不同结果；</li>\n<li>对异常值敏感；</li>\n<li>样本只能归为一类，不适合多分类任务；</li>\n<li>不适合太离散的分类、样本类别不平衡的分类、非凸形状的分类。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"机器学习导致误差的原因？\"><a href=\"#机器学习导致误差的原因？\" class=\"headerlink\" title=\"机器学习导致误差的原因？\"></a>机器学习导致误差的原因？</h3><ul>\n<li>偏差：模型无法表达数据集的复杂度，模型不够复杂，导致不能学习到基本关系，导致欠拟合；</li>\n<li>方差：数据量有限，模型对数据过度敏感，导致方差；</li>\n</ul>\n<h3 id=\"过拟合、欠拟合对应的偏差和方差是怎样的？\"><a href=\"#过拟合、欠拟合对应的偏差和方差是怎样的？\" class=\"headerlink\" title=\"过拟合、欠拟合对应的偏差和方差是怎样的？\"></a>过拟合、欠拟合对应的偏差和方差是怎样的？</h3><ul>\n<li>过拟合：高方差，低偏差</li>\n<li>欠拟合：高方差、高偏差</li>\n</ul>\n<h3 id=\"如何解决过拟合问题？哪些角度\"><a href=\"#如何解决过拟合问题？哪些角度\" class=\"headerlink\" title=\"如何解决过拟合问题？哪些角度\"></a>如何解决过拟合问题？哪些角度</h3><ul>\n<li>更多数据、数据增强；</li>\n<li>更换模型：更简单模型、更优化的模型；</li>\n<li>权重衰减正则化；</li>\n<li>bagging等集成学习方法，深度学习中的dropout；</li>\n<li>early stopping；</li>\n</ul>\n<h2 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h2><h3 id=\"优化器，SGD与Adam的异同点\"><a href=\"#优化器，SGD与Adam的异同点\" class=\"headerlink\" title=\"优化器，SGD与Adam的异同点\"></a>优化器，SGD与Adam的异同点</h3><ul>\n<li>SGD有两大改进方向：动量上改进、自适应学习率改进</li>\n<li>Adam同时结合了这两者的改进方法：在动量上用了Momentum，自适应学习率上用了RMSprop</li>\n</ul>\n<h3 id=\"SGD缺点，已经有什么改进的优化器\"><a href=\"#SGD缺点，已经有什么改进的优化器\" class=\"headerlink\" title=\"SGD缺点，已经有什么改进的优化器\"></a>SGD缺点，已经有什么改进的优化器</h3><ul>\n<li>每次只使用一批样本，导致迭代方向变化很大，容易剧烈震荡；</li>\n<li>学习率固定，容易在局部下降速度过慢过过快，得到局部最优解或者学习过慢；</li>\n<li>改进方法就是动量和自适应学习率：momentum、adagrad、Adam、等；</li>\n</ul>\n<h3 id=\"网络权重初始化为0有什么影响，初始化为一个非0的常数呢？\"><a href=\"#网络权重初始化为0有什么影响，初始化为一个非0的常数呢？\" class=\"headerlink\" title=\"网络权重初始化为0有什么影响，初始化为一个非0的常数呢？\"></a>网络权重初始化为0有什么影响，初始化为一个非0的常数呢？</h3><ul>\n<li>如果W、b初始化为0：每一层前向传播输出都是一致的，反向传播同样就一致，多个神经元作用等同于1个；</li>\n<li>只有W初始化为0：b随机初始化：反向传播过程中，第一次的第一层的dw都是0，只有第二次才能恢复，导致收敛更慢，梯度消失问题严重；</li>\n<li>只有b初始化为0：可以的</li>\n</ul>\n<h3 id=\"embedding如何设置维度？越大越好还是越小越好？\"><a href=\"#embedding如何设置维度？越大越好还是越小越好？\" class=\"headerlink\" title=\"embedding如何设置维度？越大越好还是越小越好？\"></a>embedding如何设置维度？越大越好还是越小越好？</h3><ul>\n<li>维度越低越粗糙，拟合能力就有限；</li>\n<li>阅读越高越细致，但是需要更多数据集才能训练，容易有维度灾难；</li>\n<li>具体大小需要结合实际数据集大小，问题规模，经验参数，以及调试得到；</li>\n</ul>\n<h3 id=\"transformer中计算attention除于根号d的作用\"><a href=\"#transformer中计算attention除于根号d的作用\" class=\"headerlink\" title=\"transformer中计算attention除于根号d的作用\"></a>transformer中计算attention除于根号d的作用</h3><h3 id=\"embedding如何训练\"><a href=\"#embedding如何训练\" class=\"headerlink\" title=\"embedding如何训练\"></a>embedding如何训练</h3><ul>\n<li>CBOW: 先在句子中选定一个中心词，并把其它词作为这个中心词的上下文。在学习过程中，使用上下文的词向量推理中心词，这样中心词的语义就被传递到上下文的词向量中, 从而达到学习语义信息的目的。</li>\n<li>Skip-gram: 同样先选定一个中心词，并把其他词作为这个中心词的上下文。不同的是，在学习过程中，使用中心词的词向量去推理上下文，这样上下文定义的语义被传入中心词的表示中， 从而达到学习语义信息的目的。</li>\n<li>一般来说，CBOW比Skip-gram训练速度快，训练过程更加稳定，原因是CBOW使用上下文average的方式进行训练，每个训练step会见到更多样本。而在生僻字（出现频率低的字）处理上，skip-gram比CBOW效果更好，原因是skip-gram不会刻意回避生僻字(CBOW结构中输入中存在生僻字时，生僻字会被其它非生僻字的权重冲淡)</li>\n</ul>\n<h3 id=\"介绍下attention，相比cnn、lstm的优势\"><a href=\"#介绍下attention，相比cnn、lstm的优势\" class=\"headerlink\" title=\"介绍下attention，相比cnn、lstm的优势\"></a>介绍下attention，相比cnn、lstm的优势</h3><h3 id=\"word2vec如何进行负采样\"><a href=\"#word2vec如何进行负采样\" class=\"headerlink\" title=\"word2vec如何进行负采样\"></a>word2vec如何进行负采样</h3><ul>\n<li>负采样的核心思想是：就是分别计算正负样本的loss，这样负样本就可以选择采样的那几条，而不是除开正样本以外的所有样本。</li>\n<li>一个单词被选作negative sample的概率跟它出现的频次有关，出现频次越高的单词越容易被选作negative words</li>\n</ul>\n<h3 id=\"word2vec两种训练方法的区别，具体损失函数\"><a href=\"#word2vec两种训练方法的区别，具体损失函数\" class=\"headerlink\" title=\"word2vec两种训练方法的区别，具体损失函数\"></a>word2vec两种训练方法的区别，具体损失函数</h3><ul>\n<li>如上</li>\n</ul>\n<h3 id=\"介绍LSTM每一个门的具体操作，一个LSTM-cell的时间复杂度是多少\"><a href=\"#介绍LSTM每一个门的具体操作，一个LSTM-cell的时间复杂度是多少\" class=\"headerlink\" title=\"介绍LSTM每一个门的具体操作，一个LSTM cell的时间复杂度是多少\"></a>介绍LSTM每一个门的具体操作，一个LSTM cell的时间复杂度是多少</h3><ul>\n<li>forget gate：决定上一时刻的单元c-1有多少保存到当前时刻c</li>\n<li>input gate：决定当前时刻的输入x，有多少保存下来到c</li>\n<li>output gate：决定当前单元c，有多少输出的当前的输出值h</li>\n<li>复杂度没有找到相关资料；</li>\n</ul>\n<h3 id=\"transformer中encoder和decoder的输入分别是什么\"><a href=\"#transformer中encoder和decoder的输入分别是什么\" class=\"headerlink\" title=\"transformer中encoder和decoder的输入分别是什么\"></a>transformer中encoder和decoder的输入分别是什么</h3><h3 id=\"transformer中encoder与decoder的QKV矩阵如何产生\"><a href=\"#transformer中encoder与decoder的QKV矩阵如何产生\" class=\"headerlink\" title=\"transformer中encoder与decoder的QKV矩阵如何产生\"></a>transformer中encoder与decoder的QKV矩阵如何产生</h3><h3 id=\"transformer中QKV矩阵是否可以设置成同一个\"><a href=\"#transformer中QKV矩阵是否可以设置成同一个\" class=\"headerlink\" title=\"transformer中QKV矩阵是否可以设置成同一个\"></a>transformer中QKV矩阵是否可以设置成同一个</h3><h3 id=\"transformer与bert的位置编码有什么区别\"><a href=\"#transformer与bert的位置编码有什么区别\" class=\"headerlink\" title=\"transformer与bert的位置编码有什么区别\"></a>transformer与bert的位置编码有什么区别</h3><h3 id=\"BERT中计算attention的公式\"><a href=\"#BERT中计算attention的公式\" class=\"headerlink\" title=\"BERT中计算attention的公式\"></a>BERT中计算attention的公式</h3><h3 id=\"BERT中LayerNorm的作用，为什么不用BN？\"><a href=\"#BERT中LayerNorm的作用，为什么不用BN？\" class=\"headerlink\" title=\"BERT中LayerNorm的作用，为什么不用BN？\"></a>BERT中LayerNorm的作用，为什么不用BN？</h3><h3 id=\"BERT中的两种预训练任务介绍\"><a href=\"#BERT中的两种预训练任务介绍\" class=\"headerlink\" title=\"BERT中的两种预训练任务介绍\"></a>BERT中的两种预训练任务介绍</h3><h3 id=\"深度学习中BN的好处？最早提出BN是为了解决什么问题？BN具体怎么实现的\"><a href=\"#深度学习中BN的好处？最早提出BN是为了解决什么问题？BN具体怎么实现的\" class=\"headerlink\" title=\"深度学习中BN的好处？最早提出BN是为了解决什么问题？BN具体怎么实现的\"></a>深度学习中BN的好处？最早提出BN是为了解决什么问题？BN具体怎么实现的</h3><ul>\n<li>随着训练进行，数据的分布会发生变化，会导致训练困难。如果没有 BN 层，深度神经网络中的每一层的输入数据或大或小、分布情况等都是不可控的。有了 BN 层之后，每层的数据分布都被转换在均值为零，方差为1 的状态，这样每层数据的分布大致是一样的，训练会比较容易收敛。</li>\n<li>神经网络在训练时比较容易收敛，更容易避免梯度消失、梯度爆炸；</li>\n</ul>\n<h3 id=\"激活函数中，sigmoid，tanh有什么不好的地方？relu有什么优势？\"><a href=\"#激活函数中，sigmoid，tanh有什么不好的地方？relu有什么优势？\" class=\"headerlink\" title=\"激活函数中，sigmoid，tanh有什么不好的地方？relu有什么优势？\"></a>激活函数中，sigmoid，tanh有什么不好的地方？relu有什么优势？</h3><ul>\n<li><p>sigmoid、tanh缺点</p>\n<ul>\n<li>两端有梯度消失；</li>\n<li>有指数等运算，求导更复杂；</li>\n</ul>\n</li>\n<li><p>relu优点：</p>\n<ul>\n<li>求导快，梯度固定；</li>\n<li>避免了两端梯度消失现象；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h2><h3 id=\"特征工程一般怎么做\"><a href=\"#特征工程一般怎么做\" class=\"headerlink\" title=\"特征工程一般怎么做\"></a>特征工程一般怎么做</h3><ul>\n<li>特征分类</li>\n<li>特征预处理</li>\n<li>特征构建</li>\n<li>特征选择</li>\n<li>特征评估<h3 id=\"特征数值分布比较稀疏如何处理\"><a href=\"#特征数值分布比较稀疏如何处理\" class=\"headerlink\" title=\"特征数值分布比较稀疏如何处理\"></a>特征数值分布比较稀疏如何处理</h3></li>\n<li>embedding</li>\n<li>用对稀疏特征优化更好的算法，比如FM等；</li>\n</ul>\n<h3 id=\"正负样本不均衡如何处理\"><a href=\"#正负样本不均衡如何处理\" class=\"headerlink\" title=\"正负样本不均衡如何处理\"></a>正负样本不均衡如何处理</h3><ul>\n<li>采样（欠采样、过采样</li>\n<li>集成学习</li>\n<li>对较少样本分类错误增加更高惩罚</li>\n</ul>\n<h3 id=\"连续特征离散化的作用\"><a href=\"#连续特征离散化的作用\" class=\"headerlink\" title=\"连续特征离散化的作用\"></a>连续特征离散化的作用</h3><ul>\n<li>增强模型鲁棒性，减少噪声的影响，减少过拟合</li>\n<li>增强表达能力，引入了非线性表达，减少偏差</li>\n<li>模型运算速度更快，储存所用空间更少</li>\n</ul>\n<h3 id=\"对id类特征onehot导致维度过高，如何处理？\"><a href=\"#对id类特征onehot导致维度过高，如何处理？\" class=\"headerlink\" title=\"对id类特征onehot导致维度过高，如何处理？\"></a>对id类特征onehot导致维度过高，如何处理？</h3><ul>\n<li>embedding</li>\n</ul>\n<h3 id=\"如何进行特征筛选\"><a href=\"#如何进行特征筛选\" class=\"headerlink\" title=\"如何进行特征筛选\"></a>如何进行特征筛选</h3><ul>\n<li>过滤法：按照相关性等指标对特征评分，进行特征选择</li>\n<li>包装法：每次选择部分特征进行训练</li>\n<li>嵌入法：使用能够计算特征重要性的模型（比如树、线性模型），找到最重要的特征</li>\n</ul>\n<h2 id=\"评估指标\"><a href=\"#评估指标\" class=\"headerlink\" title=\"评估指标\"></a>评估指标</h2><h3 id=\"auc的含义和计算方法\"><a href=\"#auc的含义和计算方法\" class=\"headerlink\" title=\"auc的含义和计算方法\"></a>auc的含义和计算方法</h3><ul>\n<li>**<a href=\"https://baike.baidu.com/item/ROC%E6%9B%B2%E7%BA%BF/775606\">ROC曲线</a><strong>全称为<a href=\"https://baike.baidu.com/item/%E5%8F%97%E8%AF%95%E8%80%85%E5%B7%A5%E4%BD%9C%E7%89%B9%E5%BE%81%E6%9B%B2%E7%BA%BF/12718177\">受试者工作特征曲线</a> （receiver operating characteristic curve），它是根据一系列不同的二分类方式（分界值或决定阈），以真阳性率（敏感性）为纵坐标，假阳性率（1-特异性）为横坐标绘制的</strong><a href=\"https://baike.baidu.com/item/%E6%9B%B2%E7%BA%BF/12004395\">曲线</a>**。</li>\n<li><strong>AUC</strong>（Area Under Curve）被定义为ROC曲线下的面积</li>\n<li>auc两种绘制方法：<ul>\n<li>绘制ROC，分段计算面积；</li>\n<li>利用auc另一种解释：正样本在负样本前的概率。具体如下：假设有m个正样本、n个负样本，共有mn个样本对，计算其中正样本在负样本前的概率；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"如果对负样本进行采样，auc的计算结果会发生变化吗\"><a href=\"#如果对负样本进行采样，auc的计算结果会发生变化吗\" class=\"headerlink\" title=\"如果对负样本进行采样，auc的计算结果会发生变化吗\"></a>如果对负样本进行采样，auc的计算结果会发生变化吗</h3><ul>\n<li>针对负样本做随机采样，或者针对正样本做随机采样，或者全局做随机采样，保证随机采样后正负样本分布不变，这个时候auc对采样不敏感。</li>\n</ul>\n<h3 id=\"交叉熵跟MSE有什么区别\"><a href=\"#交叉熵跟MSE有什么区别\" class=\"headerlink\" title=\"交叉熵跟MSE有什么区别\"></a>交叉熵跟MSE有什么区别</h3><ul>\n<li>一个用于分类任务，一个用于回归任务；</li>\n<li>MSE是假设数据符合高斯分布时,模型概率分布的负条件对数似然;</li>\n<li>交叉熵是假设模型分布为多项式分布时,模型分布的负条件对数似然；</li>\n<li>MSE无差别得关注全部类别上预测概率和真实概率的差；</li>\n<li>交叉熵关注的是正确类别的预测概率；</li>\n</ul>\n<h3 id=\"micro-f1解释\"><a href=\"#micro-f1解释\" class=\"headerlink\" title=\"micro-f1解释\"></a>micro-f1解释</h3><ul>\n<li>micro f1不需要区分类别，直接使用总体样本的准召计算f1 score；</li>\n<li>在推荐系统中，种类中数量较多的商品会对f1造成更大的影响力；</li>\n<li>Macro F1分类别计算精确率和召回率，求均值后计算f1；</li>\n</ul>\n<h3 id=\"介绍下排序指标ndcg\"><a href=\"#介绍下排序指标ndcg\" class=\"headerlink\" title=\"介绍下排序指标ndcg\"></a>介绍下排序指标ndcg</h3><ul>\n<li>归一化折损累计增益，NDCG用作排序结果的评价指标，这个指标通常是用来衡量和评价搜索结果算法；</li>\n<li>ndcg@n 只关心前n个排序是否正确，后面的排序正不正确不予考虑。ndcg@n 的计算方式比较特别，要进行两次排序，一次是对预测的结果排序，另一次是对实际的分布排序；</li>\n</ul>\n<h1 id=\"推荐模型相关\"><a href=\"#推荐模型相关\" class=\"headerlink\" title=\"推荐模型相关\"></a>推荐模型相关</h1><h2 id=\"召回\"><a href=\"#召回\" class=\"headerlink\" title=\"召回\"></a>召回</h2><h3 id=\"介绍双塔模型\"><a href=\"#介绍双塔模型\" class=\"headerlink\" title=\"介绍双塔模型\"></a>介绍双塔模型</h3><ul>\n<li>双塔模型最大的特点就是<strong>「user和item是独立的两个子网络」</strong>，左侧是用户塔，右侧是item塔，这两个塔的参数不共享；</li>\n<li>输入层：<strong>「[User特征]」</strong>主要包括和用户相关的特征：用户id、手机系统、地域、年龄、历史行为序列等，<strong>「Item特征」</strong>主要包括和Item相关的特征：ItemId、Item类别、Item来源等；</li>\n<li>表示层：User特征和Item特征分别输入到特征提取网络（比如说DNN等）得到User Embedding和Item Embedding。之后我们可以计算这两个Embedding之间的余弦距离。<strong>「用户点击过的Item其距离更近，用户没有点击过或者讨厌的Item其距离更远」</strong>。之后利用算得的loss来更新模型的参数。</li>\n<li>匹配层：拿用户向量去FAISS中和Item向量进行相似度计算，并返回距离最近的Top K个Item作为个性化的召回结果。</li>\n</ul>\n<h3 id=\"双塔模型的输出，用双塔embedding做内积-sigmoid和求余弦相似度-sigmoid的区别\"><a href=\"#双塔模型的输出，用双塔embedding做内积-sigmoid和求余弦相似度-sigmoid的区别\" class=\"headerlink\" title=\"双塔模型的输出，用双塔embedding做内积+sigmoid和求余弦相似度+sigmoid的区别\"></a>双塔模型的输出，用双塔embedding做内积+sigmoid和求余弦相似度+sigmoid的区别</h3><h3 id=\"双塔模型一般怎么做特征\"><a href=\"#双塔模型一般怎么做特征\" class=\"headerlink\" title=\"双塔模型一般怎么做特征\"></a>双塔模型一般怎么做特征</h3><ul>\n<li>每个塔各自构建user与item embedding，**[User特征]」<strong>主要包括和用户相关的特征：用户id、手机系统、地域、年龄、历史行为序列等，上下文特征（Context feature）可以放入用户侧塔，</strong>「Item特征」**主要包括和Item相关的特征：ItemId、Item类别、Item来源等；</li>\n</ul>\n<h3 id=\"双塔模型为什么不直接把两个塔合起来输入一个DNN\"><a href=\"#双塔模型为什么不直接把两个塔合起来输入一个DNN\" class=\"headerlink\" title=\"双塔模型为什么不直接把两个塔合起来输入一个DNN\"></a>双塔模型为什么不直接把两个塔合起来输入一个DNN</h3><ul>\n<li>性能：减少线上运算速度，item塔可以提前训练，线上只需要user的embedding和相似度计算；</li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"为什么CTR中目前普遍使用深度学习模型替换树模型？\"><a href=\"#为什么CTR中目前普遍使用深度学习模型替换树模型？\" class=\"headerlink\" title=\"为什么CTR中目前普遍使用深度学习模型替换树模型？\"></a>为什么CTR中目前普遍使用深度学习模型替换树模型？</h3><ul>\n<li>强大的表达能力，能够挖掘更深层次数据模式；</li>\n<li>模型结构非常灵活，能够根据实际应用场景进行调整<h3 id=\"为什么要有wide层、FM层，deep层不也有记忆能力吗\"><a href=\"#为什么要有wide层、FM层，deep层不也有记忆能力吗\" class=\"headerlink\" title=\"为什么要有wide层、FM层，deep层不也有记忆能力吗\"></a>为什么要有wide层、FM层，deep层不也有记忆能力吗</h3></li>\n<li>wide层记忆能力更强，因为它结构简单，原始数据能够直接影响推荐结果，能够学习到数据中的简单规则<h3 id=\"DeepFM与wide-amp-deep的介绍与对比\"><a href=\"#DeepFM与wide-amp-deep的介绍与对比\" class=\"headerlink\" title=\"DeepFM与wide&amp;deep的介绍与对比\"></a>DeepFM与wide&amp;deep的介绍与对比</h3></li>\n<li>Wide&amp;Deep模型同时考虑了记忆能力和泛化能力，但Wide部分需要人工参与特征工程；DeepFM对Wide&amp;Deep模型的改进之处在于用FM替换了原来的Wide部分,加强了浅层网络部分特征组合的能力。</li>\n<li>DeepFM的动机非常直观，既希望考虑高&#x2F;低阶的feature interaction，又想省去额外的特征工程。使用FM取代Wide的LR部分是一个可行的做法，当然这里LR可以基于先验构造更高阶的组合特征，而FM只考虑二阶，DeepFM中的FM层和隐藏层共享输入，这种共享输入使得DeepFM可以同时从原始特征中学习低阶特征交互和高阶特征交互,完全不需要执行特征工程。<h3 id=\"对DeepFM进行优化，有哪些思路\"><a href=\"#对DeepFM进行优化，有哪些思路\" class=\"headerlink\" title=\"对DeepFM进行优化，有哪些思路\"></a>对DeepFM进行优化，有哪些思路</h3><h3 id=\"DeepFM如果过拟合和欠拟合分别如何处理\"><a href=\"#DeepFM如果过拟合和欠拟合分别如何处理\" class=\"headerlink\" title=\"DeepFM如果过拟合和欠拟合分别如何处理\"></a>DeepFM如果过拟合和欠拟合分别如何处理</h3><h3 id=\"介绍除了FM之外的特征交叉的模型\"><a href=\"#介绍除了FM之外的特征交叉的模型\" class=\"headerlink\" title=\"介绍除了FM之外的特征交叉的模型\"></a>介绍除了FM之外的特征交叉的模型</h3></li>\n<li>FNN：有高阶bit-wise特征交叉，每个特征都使用了与训练的FM模型，训练开销更低。</li>\n<li>DeepFM：是一种可以从原始特征中抽取到各种复杂度特征的端到端模型，没有人工<a href=\"https://www.zhihu.com/search?q=%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:269730650%7D\">特征工程</a>的困扰，DeepFM模型包含FM和DNN两部分，FM模型可以抽取low-order特征，DNN可以抽取high-order特征。无需类似Wide&amp;Deep模型人工特征工程。</li>\n<li>DCN：可以任意组合特征，而且不增加网络参数.Cross的目的是以一种显示、可控且高效的方式，自动构造有限高阶交叉特征。</li>\n</ul>\n<h3 id=\"介绍DIN模型，适合的场景\"><a href=\"#介绍DIN模型，适合的场景\" class=\"headerlink\" title=\"介绍DIN模型，适合的场景\"></a>介绍DIN模型，适合的场景</h3><ul>\n<li>在DIN出现之前，推荐系统或者广告系统的做法通常是将高维的稀疏输入通过一个embedding层转化为低维稠密的特征表示，之后将同类的embedding特征通过pooling的方式（sum pooling或者avg pooling）转化为固定长度的特征，最后将不同类特征拼接起来输入到网络中进行训练。</li>\n<li>DIN模型，增加了注意力机制，D模型的创新点或者解决的问题就是使用了注意力机制来对用户的兴趣动态模拟， 而这个模拟过程存在的前提就是用户之前有大量的历史行为了，这样我们在预测某个商品广告用户是否点击的时候，就可以参考他之前购买过或者查看过的商品，这样就能猜测出用户的大致兴趣来，这样我们的推荐才能做的更加到位，所以这个模型的使用场景是<strong>非常注重用户的历史行为特征（历史购买过的商品或者类别信息）</strong></li>\n</ul>\n<h3 id=\"DIN中如何计算attention\"><a href=\"#DIN中如何计算attention\" class=\"headerlink\" title=\"DIN中如何计算attention\"></a>DIN中如何计算attention</h3><ul>\n<li><p>计算attention的方式是利用用户行为的Embedding向量和广告的Embedding向量来进行计算，具体文章中采用的是用一个神经网络（activation unit）来得到weight；</p>\n</li>\n<li><p>activation unit的输入包括两个部分，一个是原始的用户行为embedding向量、广告embedding向量；另外一个是两者Embedding向量经过外积计算后得到的向量，文章指出这种方式有利于relevance modeling。 </p>\n<p>除此之外文章用到的Attention机制不是原始NLP任务中采用的Attention，文章中放宽了对于权重加和等于一的限制，这样更有利于体现不同用户行为特征之间的差异化程度。</p>\n</li>\n</ul>\n<h3 id=\"transformer与DIN的区别和联系\"><a href=\"#transformer与DIN的区别和联系\" class=\"headerlink\" title=\"transformer与DIN的区别和联系\"></a>transformer与DIN的区别和联系</h3><h3 id=\"介绍下listwise排序模型LambdaRank\"><a href=\"#介绍下listwise排序模型LambdaRank\" class=\"headerlink\" title=\"介绍下listwise排序模型LambdaRank\"></a>介绍下listwise排序模型LambdaRank</h3><ul>\n<li>Listwise方法是直接优化排序列表，输入为单条样本为一个<strong>文档排列</strong>。通过构造合适的度量函数衡量当前文档排序和最优排序差值，优化度量函数得到排序模型。</li>\n</ul>\n<h1 id=\"热门技术相关\"><a href=\"#热门技术相关\" class=\"headerlink\" title=\"热门技术相关\"></a>热门技术相关</h1><h2 id=\"Embedding\"><a href=\"#Embedding\" class=\"headerlink\" title=\"Embedding\"></a>Embedding</h2><h3 id=\"介绍下item2vec模型\"><a href=\"#介绍下item2vec模型\" class=\"headerlink\" title=\"介绍下item2vec模型\"></a>介绍下item2vec模型</h3><ul>\n<li>相比于Word2vec利用“词序列”生成词Embedding。Item2vec利用“物品序列”构造物品Embedding。 其中物品序列是由指定用户的浏览购买等行为产生的历史行为序列；</li>\n<li>利用用户行为序列，采用word2vec思想，生成每个item的Embedding，同样user embedding：由历史item embedding平均或聚类得到；</li>\n</ul>\n<h3 id=\"embedding冷启动怎么做\"><a href=\"#embedding冷启动怎么做\" class=\"headerlink\" title=\"embedding冷启动怎么做\"></a>embedding冷启动怎么做</h3><ul>\n<li>补充side information：加入一些其他类型的特征，典型的用户侧特征是人口统计特征，典型的物品侧特征是一些内容型特征；</li>\n<li>从推荐架构改进：批处理-&gt;流处理-&gt;实时推断-&gt;边缘计算，让新信号的消费变得越来越实时；</li>\n<li>冷启动机制：比如采用Airbnb方案，利用物品之间的相似性，对冷启动物品根据相似物品，快速生成初始化Embedding。或者聚类，决策树等经典模型；</li>\n</ul>\n<h2 id=\"多任务学习\"><a href=\"#多任务学习\" class=\"headerlink\" title=\"多任务学习\"></a>多任务学习</h2><h3 id=\"多任务学习模型的发展历史详细介绍\"><a href=\"#多任务学习模型的发展历史详细介绍\" class=\"headerlink\" title=\"多任务学习模型的发展历史详细介绍\"></a>多任务学习模型的发展历史详细介绍</h3><h3 id=\"为什么要用多任务学习\"><a href=\"#为什么要用多任务学习\" class=\"headerlink\" title=\"为什么要用多任务学习\"></a>为什么要用多任务学习</h3><h3 id=\"介绍MMOE、PLE、ESMM，PLE相对MMOE的改进\"><a href=\"#介绍MMOE、PLE、ESMM，PLE相对MMOE的改进\" class=\"headerlink\" title=\"介绍MMOE、PLE、ESMM，PLE相对MMOE的改进\"></a>介绍MMOE、PLE、ESMM，PLE相对MMOE的改进</h3><h3 id=\"ESSM算法原理和解决的两个问题\"><a href=\"#ESSM算法原理和解决的两个问题\" class=\"headerlink\" title=\"ESSM算法原理和解决的两个问题\"></a>ESSM算法原理和解决的两个问题</h3><h3 id=\"ESMM中如何解决CVR样本过于稀疏的问题，实际上解决了吗\"><a href=\"#ESMM中如何解决CVR样本过于稀疏的问题，实际上解决了吗\" class=\"headerlink\" title=\"ESMM中如何解决CVR样本过于稀疏的问题，实际上解决了吗\"></a>ESMM中如何解决CVR样本过于稀疏的问题，实际上解决了吗</h3><h3 id=\"ESMM训练是否使用全量样本\"><a href=\"#ESMM训练是否使用全量样本\" class=\"headerlink\" title=\"ESMM训练是否使用全量样本\"></a>ESMM训练是否使用全量样本</h3><h3 id=\"介绍PLE模型\"><a href=\"#介绍PLE模型\" class=\"headerlink\" title=\"介绍PLE模型\"></a>介绍PLE模型</h3><h3 id=\"PLE里面loss如何平衡\"><a href=\"#PLE里面loss如何平衡\" class=\"headerlink\" title=\"PLE里面loss如何平衡\"></a>PLE里面loss如何平衡</h3><h3 id=\"PLE模型中，是否有尝试对不同的gate用不同的特征，是否有尝试不同业务用不同的特征组合\"><a href=\"#PLE模型中，是否有尝试对不同的gate用不同的特征，是否有尝试不同业务用不同的特征组合\" class=\"headerlink\" title=\"PLE模型中，是否有尝试对不同的gate用不同的特征，是否有尝试不同业务用不同的特征组合\"></a>PLE模型中，是否有尝试对不同的gate用不同的特征，是否有尝试不同业务用不同的特征组合</h3><h3 id=\"gradnorm介绍\"><a href=\"#gradnorm介绍\" class=\"headerlink\" title=\"gradnorm介绍\"></a>gradnorm介绍</h3><h3 id=\"介绍关于多任务权重设置的相关模型或者策略\"><a href=\"#介绍关于多任务权重设置的相关模型或者策略\" class=\"headerlink\" title=\"介绍关于多任务权重设置的相关模型或者策略\"></a>介绍关于多任务权重设置的相关模型或者策略</h3><h3 id=\"如何平衡不同任务的loss\"><a href=\"#如何平衡不同任务的loss\" class=\"headerlink\" title=\"如何平衡不同任务的loss\"></a>如何平衡不同任务的loss</h3><h3 id=\"如果一个特征对任务a是正相关，对任务b是负相关，如何处理这个特征\"><a href=\"#如果一个特征对任务a是正相关，对任务b是负相关，如何处理这个特征\" class=\"headerlink\" title=\"如果一个特征对任务a是正相关，对任务b是负相关，如何处理这个特征\"></a>如果一个特征对任务a是正相关，对任务b是负相关，如何处理这个特征</h3><h3 id=\"CTR和CVR任务放在ESMM（都是曝光空间）里和放在PLE（CTR点击空间，CVR曝光空间）里哪种效果好\"><a href=\"#CTR和CVR任务放在ESMM（都是曝光空间）里和放在PLE（CTR点击空间，CVR曝光空间）里哪种效果好\" class=\"headerlink\" title=\"CTR和CVR任务放在ESMM（都是曝光空间）里和放在PLE（CTR点击空间，CVR曝光空间）里哪种效果好\"></a>CTR和CVR任务放在ESMM（都是曝光空间）里和放在PLE（CTR点击空间，CVR曝光空间）里哪种效果好</h3><h2 id=\"模型蒸馏\"><a href=\"#模型蒸馏\" class=\"headerlink\" title=\"模型蒸馏\"></a>模型蒸馏</h2><h3 id=\"介绍下蒸馏的loss\"><a href=\"#介绍下蒸馏的loss\" class=\"headerlink\" title=\"介绍下蒸馏的loss\"></a>介绍下蒸馏的loss</h3><h2 id=\"图神经网络\"><a href=\"#图神经网络\" class=\"headerlink\" title=\"图神经网络\"></a>图神经网络</h2><h3 id=\"GCN、GraphSAGE、GAT的区别与联系\"><a href=\"#GCN、GraphSAGE、GAT的区别与联系\" class=\"headerlink\" title=\"GCN、GraphSAGE、GAT的区别与联系\"></a>GCN、GraphSAGE、GAT的区别与联系</h3><h3 id=\"node2vec对比deepwalk的改进\"><a href=\"#node2vec对比deepwalk的改进\" class=\"headerlink\" title=\"node2vec对比deepwalk的改进\"></a>node2vec对比deepwalk的改进</h3><ul>\n<li>node2vec的思想同DeepWalk一样，生成随机游走，对随机游走采样得到（节点，上下文）的组合，然后用处理词向量的方法对这样的组合建模得到网络节点的表示。不过在生成随机游走过程中做了一些创新，node2vec改进了DeepWalk中随机游走的生成方式(通过调整随机游走权重的方法使graph embedding的结果在网络的同质性（homophily）和结构性（structural equivalence）中进行权衡)，使得生成的随机游走可以反映深度优先和广度优先两种采样的特性，从而提高网络嵌入的效果。</li>\n</ul>\n<h3 id=\"graphsage对比gcn的优势\"><a href=\"#graphsage对比gcn的优势\" class=\"headerlink\" title=\"graphsage对比gcn的优势\"></a>graphsage对比gcn的优势</h3><h3 id=\"transductive与Inductive的区别\"><a href=\"#transductive与Inductive的区别\" class=\"headerlink\" title=\"transductive与Inductive的区别\"></a>transductive与Inductive的区别</h3><h3 id=\"训练图模型的loss有哪些\"><a href=\"#训练图模型的loss有哪些\" class=\"headerlink\" title=\"训练图模型的loss有哪些\"></a>训练图模型的loss有哪些</h3><h3 id=\"graph-embedding的作用\"><a href=\"#graph-embedding的作用\" class=\"headerlink\" title=\"graph embedding的作用\"></a>graph embedding的作用</h3><h1 id=\"业务场景相关\"><a href=\"#业务场景相关\" class=\"headerlink\" title=\"业务场景相关\"></a>业务场景相关</h1><h3 id=\"CVR相比CTR的区别、特点\"><a href=\"#CVR相比CTR的区别、特点\" class=\"headerlink\" title=\"CVR相比CTR的区别、特点\"></a>CVR相比CTR的区别、特点</h3><h3 id=\"搜索与推荐的区别，你认为哪个难度更大\"><a href=\"#搜索与推荐的区别，你认为哪个难度更大\" class=\"headerlink\" title=\"搜索与推荐的区别，你认为哪个难度更大\"></a>搜索与推荐的区别，你认为哪个难度更大</h3><ul>\n<li>排得更好VS估得更准VS搜的更全「推荐、广告、搜索」算法间到底有什么区别？ - 王喆的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/430431149\">https://zhuanlan.zhihu.com/p/430431149</a></li>\n</ul>\n<h3 id=\"广告与推荐的区别\"><a href=\"#广告与推荐的区别\" class=\"headerlink\" title=\"广告与推荐的区别\"></a>广告与推荐的区别</h3><ul>\n<li>排得更好VS估得更准VS搜的更全「推荐、广告、搜索」算法间到底有什么区别？ - 王喆的文章 - 知乎 <a href=\"https://zhuanlan.zhihu.com/p/430431149\">https://zhuanlan.zhihu.com/p/430431149</a></li>\n</ul>\n<h3 id=\"什么时候用规则，什么时候用模型\"><a href=\"#什么时候用规则，什么时候用模型\" class=\"headerlink\" title=\"什么时候用规则，什么时候用模型\"></a>什么时候用规则，什么时候用模型</h3><h3 id=\"线上如何生成最终的排序得分\"><a href=\"#线上如何生成最终的排序得分\" class=\"headerlink\" title=\"线上如何生成最终的排序得分\"></a>线上如何生成最终的排序得分</h3><h3 id=\"正负样本介绍（规模和比例），如何构造负样本\"><a href=\"#正负样本介绍（规模和比例），如何构造负样本\" class=\"headerlink\" title=\"正负样本介绍（规模和比例），如何构造负样本\"></a>正负样本介绍（规模和比例），如何构造负样本</h3><ul>\n<li><p>正样本可以定义为用户当天播放过的节目，也就是“喜欢”；</p>\n</li>\n<li><p>负样本则有两种选择方案：</p>\n<p>（1）负样本指的是对用户曝光过的节目，但是用户至始至终都没有播放过，也就是说该节目并不在“历史”和“喜欢”两个分类里面；<br>（2）负样本指的是在整个抽样的池子里面，但是用户至始至终都没有播放过，也就是说该节目并不在“历史”和“喜欢”这两个分类里面，<strong>我们会选择给用户曝光但是用户没有进行播放的节目作为负阳本</strong>；</p>\n</li>\n<li><p>假设正样本的条数是N，则负样本的条数会控制在2N或者3N，即遵循1:2或者1:3的关系，当然具体的业务场景下要进行不同的尝试和离线评估指标的对比。</p>\n</li>\n</ul>\n<h3 id=\"低活用户特征稀疏如何解决\"><a href=\"#低活用户特征稀疏如何解决\" class=\"headerlink\" title=\"低活用户特征稀疏如何解决\"></a>低活用户特征稀疏如何解决</h3><ul>\n<li>扩充用户画像：注册时统计更多用户静态信息，询问用户喜欢类别等；</li>\n</ul>\n","text":"ML与DL基础机器学习 介绍下GBDT gbdt 是通过采用加法模型（即基函数的线性组合），以及不断减小训练过程产生的残差来达到将数据分类或者回归的算法， gbdt通过多轮迭代,每轮迭代产生一个弱分类器，每个分类器在上一轮分类器的残差基础上进行训练。 GBDT中的树是回归树（不是...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"AI","slug":"AI","count":3,"path":"api/categories/AI.json"}],"tags":[{"name":"推荐系统","slug":"推荐系统","count":2,"path":"api/tags/推荐系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ML%E4%B8%8EDL%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">ML与DL基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">机器学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8BGBDT\"><span class=\"toc-text\">介绍下GBDT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DXGBoost\"><span class=\"toc-text\">介绍XGBoost</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8BLightGBM\"><span class=\"toc-text\">介绍下LightGBM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LightGBM%E7%9B%B8%E5%AF%B9%E4%BA%8EXGBoost%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">LightGBM相对于XGBoost的改进</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GBDT%E4%B8%AD%E7%9A%84%E6%A2%AF%E5%BA%A6%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E6%80%8E%E4%B9%88%E7%94%A8\"><span class=\"toc-text\">GBDT中的梯度是什么，怎么用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GBDT%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E7%89%B9%E5%BE%81%E9%87%8D%E8%A6%81%E6%80%A7\"><span class=\"toc-text\">GBDT如何计算特征重要性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DXGBoost%E4%B8%AD%E7%9A%84%E5%B9%B6%E8%A1%8C\"><span class=\"toc-text\">介绍XGBoost中的并行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DXGBoost%E4%B8%AD%E7%B2%BE%E7%A1%AE%E7%AE%97%E6%B3%95%E4%B8%8E%E8%BF%91%E4%BC%BC%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">介绍XGBoost中精确算法与近似算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XGBoost%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E7%A9%BA%E7%BC%BA%E5%80%BC\"><span class=\"toc-text\">XGBoost如何处理空缺值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95%E8%A6%81%E8%BF%9B%E8%A1%8C%E8%A1%8C%E9%87%87%E6%A0%B7%E3%80%81%E5%88%97%E9%87%87%E6%A0%B7\"><span class=\"toc-text\">为何要进行行采样、列采样</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%AB%98%E7%BB%B4%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%EF%BC%8CLR%E6%AF%94GBDT%E8%A6%81%E5%A5%BD\"><span class=\"toc-text\">为什么高维稀疏数据，LR比GBDT要好</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E4%B8%8EGBDT%E9%87%87%E6%A0%B7%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">随机森林与GBDT采样的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E4%B8%AD%E5%88%97%E9%87%87%E6%A0%B7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">随机森林中列采样的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bagging%E4%B8%8Eboosting%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">bagging与boosting对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bagging%E4%B8%8Eboosting%E5%88%86%E5%88%AB%E4%BB%8E%E4%BB%80%E4%B9%88%E8%A7%92%E5%BA%A6%E9%99%8D%E4%BD%8E%E8%BF%87%E6%8B%9F%E5%90%88\"><span class=\"toc-text\">bagging与boosting分别从什么角度降低过拟合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E8%BF%87%E6%8B%9F%E5%90%88\"><span class=\"toc-text\">逻辑回归如何避免过拟合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E5%AF%BC%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%92%8C%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC\"><span class=\"toc-text\">推导逻辑回归损失函数和损失函数求导</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E5%8C%96%E9%A1%B9L1%E5%92%8CL2%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E7%94%A8\"><span class=\"toc-text\">正则化项L1和L2为什么有用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#l1%E6%AD%A3%E5%88%99%E4%B8%8D%E5%8F%AF%E5%AF%BC%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">l1正则不可导，如何优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E7%89%B9%E5%BE%81%E5%AE%B9%E6%98%93%E4%BA%A7%E7%94%9F%E6%AF%94%E8%BE%83%E5%B0%8F%E7%9A%84%E6%9D%83%E9%87%8D\"><span class=\"toc-text\">什么样的特征容易产生比较小的权重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E9%87%87%E6%A0%B7n%E6%AC%A1%EF%BC%8Cn%E8%B6%8B%E4%BA%8E%E6%97%A0%E7%A9%B7%E5%A4%A7%EF%BC%8Coob%E6%A0%B7%E6%9C%AC%E7%9A%84%E6%A6%82%E7%8E%87%E6%8E%A5%E8%BF%91%E4%BA%8E%EF%BC%9F\"><span class=\"toc-text\">随机森林采样n次，n趋于无穷大，oob样本的概率接近于？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%A0%91%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">逻辑回归与树模型的优缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E4%BA%8E%E9%AB%98%E7%BB%B4%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%EF%BC%8C%E6%A0%91%E6%A8%A1%E5%9E%8B%E8%83%BD%E8%AE%AD%E7%BB%83%E5%90%97%EF%BC%9F%E4%B8%80%E8%88%AC%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86\"><span class=\"toc-text\">对于高维稀疏数据，树模型能训练吗？一般怎么处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%91%E6%A8%A1%E5%9E%8B%E4%B8%80%E8%88%AC%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8F%82%E6%95%B0%EF%BC%8C%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">树模型一般有哪些参数，分别有什么作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E7%A9%BA%E7%BC%BA%E5%80%BC\"><span class=\"toc-text\">随机森林如何处理空缺值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8Dkmeans%EF%BC%8C%E4%B8%8E%E5%85%B6%E4%BB%96%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">介绍kmeans，与其他聚类算法的对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AF%BC%E8%87%B4%E8%AF%AF%E5%B7%AE%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9F\"><span class=\"toc-text\">机器学习导致误差的原因？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%8B%9F%E5%90%88%E3%80%81%E6%AC%A0%E6%8B%9F%E5%90%88%E5%AF%B9%E5%BA%94%E7%9A%84%E5%81%8F%E5%B7%AE%E5%92%8C%E6%96%B9%E5%B7%AE%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">过拟合、欠拟合对应的偏差和方差是怎样的？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%87%E6%8B%9F%E5%90%88%E9%97%AE%E9%A2%98%EF%BC%9F%E5%93%AA%E4%BA%9B%E8%A7%92%E5%BA%A6\"><span class=\"toc-text\">如何解决过拟合问题？哪些角度</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">深度学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E5%8C%96%E5%99%A8%EF%BC%8CSGD%E4%B8%8EAdam%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">优化器，SGD与Adam的异同点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SGD%E7%BC%BA%E7%82%B9%EF%BC%8C%E5%B7%B2%E7%BB%8F%E6%9C%89%E4%BB%80%E4%B9%88%E6%94%B9%E8%BF%9B%E7%9A%84%E4%BC%98%E5%8C%96%E5%99%A8\"><span class=\"toc-text\">SGD缺点，已经有什么改进的优化器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA0%E6%9C%89%E4%BB%80%E4%B9%88%E5%BD%B1%E5%93%8D%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA%E4%B8%80%E4%B8%AA%E9%9D%9E0%E7%9A%84%E5%B8%B8%E6%95%B0%E5%91%A2%EF%BC%9F\"><span class=\"toc-text\">网络权重初始化为0有什么影响，初始化为一个非0的常数呢？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#embedding%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%BB%B4%E5%BA%A6%EF%BC%9F%E8%B6%8A%E5%A4%A7%E8%B6%8A%E5%A5%BD%E8%BF%98%E6%98%AF%E8%B6%8A%E5%B0%8F%E8%B6%8A%E5%A5%BD%EF%BC%9F\"><span class=\"toc-text\">embedding如何设置维度？越大越好还是越小越好？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%AD%E8%AE%A1%E7%AE%97attention%E9%99%A4%E4%BA%8E%E6%A0%B9%E5%8F%B7d%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">transformer中计算attention除于根号d的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#embedding%E5%A6%82%E4%BD%95%E8%AE%AD%E7%BB%83\"><span class=\"toc-text\">embedding如何训练</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8Battention%EF%BC%8C%E7%9B%B8%E6%AF%94cnn%E3%80%81lstm%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">介绍下attention，相比cnn、lstm的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#word2vec%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B4%9F%E9%87%87%E6%A0%B7\"><span class=\"toc-text\">word2vec如何进行负采样</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#word2vec%E4%B8%A4%E7%A7%8D%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E5%85%B7%E4%BD%93%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">word2vec两种训练方法的区别，具体损失函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DLSTM%E6%AF%8F%E4%B8%80%E4%B8%AA%E9%97%A8%E7%9A%84%E5%85%B7%E4%BD%93%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%B8%80%E4%B8%AALSTM-cell%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%98%AF%E5%A4%9A%E5%B0%91\"><span class=\"toc-text\">介绍LSTM每一个门的具体操作，一个LSTM cell的时间复杂度是多少</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%ADencoder%E5%92%8Cdecoder%E7%9A%84%E8%BE%93%E5%85%A5%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">transformer中encoder和decoder的输入分别是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%ADencoder%E4%B8%8Edecoder%E7%9A%84QKV%E7%9F%A9%E9%98%B5%E5%A6%82%E4%BD%95%E4%BA%A7%E7%94%9F\"><span class=\"toc-text\">transformer中encoder与decoder的QKV矩阵如何产生</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%ADQKV%E7%9F%A9%E9%98%B5%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E6%88%90%E5%90%8C%E4%B8%80%E4%B8%AA\"><span class=\"toc-text\">transformer中QKV矩阵是否可以设置成同一个</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%8Ebert%E7%9A%84%E4%BD%8D%E7%BD%AE%E7%BC%96%E7%A0%81%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">transformer与bert的位置编码有什么区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BERT%E4%B8%AD%E8%AE%A1%E7%AE%97attention%E7%9A%84%E5%85%AC%E5%BC%8F\"><span class=\"toc-text\">BERT中计算attention的公式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BERT%E4%B8%ADLayerNorm%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8BN%EF%BC%9F\"><span class=\"toc-text\">BERT中LayerNorm的作用，为什么不用BN？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BERT%E4%B8%AD%E7%9A%84%E4%B8%A4%E7%A7%8D%E9%A2%84%E8%AE%AD%E7%BB%83%E4%BB%BB%E5%8A%A1%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">BERT中的两种预训练任务介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%ADBN%E7%9A%84%E5%A5%BD%E5%A4%84%EF%BC%9F%E6%9C%80%E6%97%A9%E6%8F%90%E5%87%BABN%E6%98%AF%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9FBN%E5%85%B7%E4%BD%93%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84\"><span class=\"toc-text\">深度学习中BN的好处？最早提出BN是为了解决什么问题？BN具体怎么实现的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E4%B8%AD%EF%BC%8Csigmoid%EF%BC%8Ctanh%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%A5%BD%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%9Frelu%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF%EF%BC%9F\"><span class=\"toc-text\">激活函数中，sigmoid，tanh有什么不好的地方？relu有什么优势？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B\"><span class=\"toc-text\">特征工程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E4%B8%80%E8%88%AC%E6%80%8E%E4%B9%88%E5%81%9A\"><span class=\"toc-text\">特征工程一般怎么做</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E5%BE%81%E6%95%B0%E5%80%BC%E5%88%86%E5%B8%83%E6%AF%94%E8%BE%83%E7%A8%80%E7%96%8F%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">特征数值分布比较稀疏如何处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E8%B4%9F%E6%A0%B7%E6%9C%AC%E4%B8%8D%E5%9D%87%E8%A1%A1%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">正负样本不均衡如何处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E7%BB%AD%E7%89%B9%E5%BE%81%E7%A6%BB%E6%95%A3%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">连续特征离散化的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9id%E7%B1%BB%E7%89%B9%E5%BE%81onehot%E5%AF%BC%E8%87%B4%E7%BB%B4%E5%BA%A6%E8%BF%87%E9%AB%98%EF%BC%8C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%EF%BC%9F\"><span class=\"toc-text\">对id类特征onehot导致维度过高，如何处理？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%89%B9%E5%BE%81%E7%AD%9B%E9%80%89\"><span class=\"toc-text\">如何进行特征筛选</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">评估指标</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#auc%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">auc的含义和计算方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E5%AF%B9%E8%B4%9F%E6%A0%B7%E6%9C%AC%E8%BF%9B%E8%A1%8C%E9%87%87%E6%A0%B7%EF%BC%8Cauc%E7%9A%84%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C%E4%BC%9A%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%E5%90%97\"><span class=\"toc-text\">如果对负样本进行采样，auc的计算结果会发生变化吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E5%8F%89%E7%86%B5%E8%B7%9FMSE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">交叉熵跟MSE有什么区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#micro-f1%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">micro-f1解释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8B%E6%8E%92%E5%BA%8F%E6%8C%87%E6%A0%87ndcg\"><span class=\"toc-text\">介绍下排序指标ndcg</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">推荐模型相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AC%E5%9B%9E\"><span class=\"toc-text\">召回</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E5%8F%8C%E5%A1%94%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">介绍双塔模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%A1%94%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%8C%E7%94%A8%E5%8F%8C%E5%A1%94embedding%E5%81%9A%E5%86%85%E7%A7%AF-sigmoid%E5%92%8C%E6%B1%82%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6-sigmoid%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">双塔模型的输出，用双塔embedding做内积+sigmoid和求余弦相似度+sigmoid的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%A1%94%E6%A8%A1%E5%9E%8B%E4%B8%80%E8%88%AC%E6%80%8E%E4%B9%88%E5%81%9A%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">双塔模型一般怎么做特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E5%A1%94%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%9B%B4%E6%8E%A5%E6%8A%8A%E4%B8%A4%E4%B8%AA%E5%A1%94%E5%90%88%E8%B5%B7%E6%9D%A5%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AADNN\"><span class=\"toc-text\">双塔模型为什么不直接把两个塔合起来输入一个DNN</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88CTR%E4%B8%AD%E7%9B%AE%E5%89%8D%E6%99%AE%E9%81%8D%E4%BD%BF%E7%94%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E6%9B%BF%E6%8D%A2%E6%A0%91%E6%A8%A1%E5%9E%8B%EF%BC%9F\"><span class=\"toc-text\">为什么CTR中目前普遍使用深度学习模型替换树模型？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89wide%E5%B1%82%E3%80%81FM%E5%B1%82%EF%BC%8Cdeep%E5%B1%82%E4%B8%8D%E4%B9%9F%E6%9C%89%E8%AE%B0%E5%BF%86%E8%83%BD%E5%8A%9B%E5%90%97\"><span class=\"toc-text\">为什么要有wide层、FM层，deep层不也有记忆能力吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DeepFM%E4%B8%8Ewide-amp-deep%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">DeepFM与wide&amp;deep的介绍与对比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9DeepFM%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%EF%BC%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">对DeepFM进行优化，有哪些思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DeepFM%E5%A6%82%E6%9E%9C%E8%BF%87%E6%8B%9F%E5%90%88%E5%92%8C%E6%AC%A0%E6%8B%9F%E5%90%88%E5%88%86%E5%88%AB%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\"><span class=\"toc-text\">DeepFM如果过拟合和欠拟合分别如何处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E9%99%A4%E4%BA%86FM%E4%B9%8B%E5%A4%96%E7%9A%84%E7%89%B9%E5%BE%81%E4%BA%A4%E5%8F%89%E7%9A%84%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">介绍除了FM之外的特征交叉的模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DDIN%E6%A8%A1%E5%9E%8B%EF%BC%8C%E9%80%82%E5%90%88%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">介绍DIN模型，适合的场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DIN%E4%B8%AD%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97attention\"><span class=\"toc-text\">DIN中如何计算attention</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transformer%E4%B8%8EDIN%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB\"><span class=\"toc-text\">transformer与DIN的区别和联系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8Blistwise%E6%8E%92%E5%BA%8F%E6%A8%A1%E5%9E%8BLambdaRank\"><span class=\"toc-text\">介绍下listwise排序模型LambdaRank</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%83%AD%E9%97%A8%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">热门技术相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Embedding\"><span class=\"toc-text\">Embedding</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8Bitem2vec%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">介绍下item2vec模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#embedding%E5%86%B7%E5%90%AF%E5%8A%A8%E6%80%8E%E4%B9%88%E5%81%9A\"><span class=\"toc-text\">embedding冷启动怎么做</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">多任务学习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">多任务学习模型的发展历史详细介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%AD%A6%E4%B9%A0\"><span class=\"toc-text\">为什么要用多任务学习</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DMMOE%E3%80%81PLE%E3%80%81ESMM%EF%BC%8CPLE%E7%9B%B8%E5%AF%B9MMOE%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">介绍MMOE、PLE、ESMM，PLE相对MMOE的改进</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ESSM%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%92%8C%E8%A7%A3%E5%86%B3%E7%9A%84%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">ESSM算法原理和解决的两个问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ESMM%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3CVR%E6%A0%B7%E6%9C%AC%E8%BF%87%E4%BA%8E%E7%A8%80%E7%96%8F%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%AE%9E%E9%99%85%E4%B8%8A%E8%A7%A3%E5%86%B3%E4%BA%86%E5%90%97\"><span class=\"toc-text\">ESMM中如何解决CVR样本过于稀疏的问题，实际上解决了吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ESMM%E8%AE%AD%E7%BB%83%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E5%85%A8%E9%87%8F%E6%A0%B7%E6%9C%AC\"><span class=\"toc-text\">ESMM训练是否使用全量样本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8DPLE%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">介绍PLE模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PLE%E9%87%8C%E9%9D%A2loss%E5%A6%82%E4%BD%95%E5%B9%B3%E8%A1%A1\"><span class=\"toc-text\">PLE里面loss如何平衡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PLE%E6%A8%A1%E5%9E%8B%E4%B8%AD%EF%BC%8C%E6%98%AF%E5%90%A6%E6%9C%89%E5%B0%9D%E8%AF%95%E5%AF%B9%E4%B8%8D%E5%90%8C%E7%9A%84gate%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%89%B9%E5%BE%81%EF%BC%8C%E6%98%AF%E5%90%A6%E6%9C%89%E5%B0%9D%E8%AF%95%E4%B8%8D%E5%90%8C%E4%B8%9A%E5%8A%A1%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%89%B9%E5%BE%81%E7%BB%84%E5%90%88\"><span class=\"toc-text\">PLE模型中，是否有尝试对不同的gate用不同的特征，是否有尝试不同业务用不同的特征组合</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gradnorm%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">gradnorm介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E5%85%B3%E4%BA%8E%E5%A4%9A%E4%BB%BB%E5%8A%A1%E6%9D%83%E9%87%8D%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%9E%8B%E6%88%96%E8%80%85%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">介绍关于多任务权重设置的相关模型或者策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%B9%B3%E8%A1%A1%E4%B8%8D%E5%90%8C%E4%BB%BB%E5%8A%A1%E7%9A%84loss\"><span class=\"toc-text\">如何平衡不同任务的loss</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E7%89%B9%E5%BE%81%E5%AF%B9%E4%BB%BB%E5%8A%A1a%E6%98%AF%E6%AD%A3%E7%9B%B8%E5%85%B3%EF%BC%8C%E5%AF%B9%E4%BB%BB%E5%8A%A1b%E6%98%AF%E8%B4%9F%E7%9B%B8%E5%85%B3%EF%BC%8C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%BF%99%E4%B8%AA%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">如果一个特征对任务a是正相关，对任务b是负相关，如何处理这个特征</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CTR%E5%92%8CCVR%E4%BB%BB%E5%8A%A1%E6%94%BE%E5%9C%A8ESMM%EF%BC%88%E9%83%BD%E6%98%AF%E6%9B%9D%E5%85%89%E7%A9%BA%E9%97%B4%EF%BC%89%E9%87%8C%E5%92%8C%E6%94%BE%E5%9C%A8PLE%EF%BC%88CTR%E7%82%B9%E5%87%BB%E7%A9%BA%E9%97%B4%EF%BC%8CCVR%E6%9B%9D%E5%85%89%E7%A9%BA%E9%97%B4%EF%BC%89%E9%87%8C%E5%93%AA%E7%A7%8D%E6%95%88%E6%9E%9C%E5%A5%BD\"><span class=\"toc-text\">CTR和CVR任务放在ESMM（都是曝光空间）里和放在PLE（CTR点击空间，CVR曝光空间）里哪种效果好</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E8%92%B8%E9%A6%8F\"><span class=\"toc-text\">模型蒸馏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8B%E7%BB%8D%E4%B8%8B%E8%92%B8%E9%A6%8F%E7%9A%84loss\"><span class=\"toc-text\">介绍下蒸馏的loss</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C\"><span class=\"toc-text\">图神经网络</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GCN%E3%80%81GraphSAGE%E3%80%81GAT%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB\"><span class=\"toc-text\">GCN、GraphSAGE、GAT的区别与联系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#node2vec%E5%AF%B9%E6%AF%94deepwalk%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">node2vec对比deepwalk的改进</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#graphsage%E5%AF%B9%E6%AF%94gcn%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">graphsage对比gcn的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transductive%E4%B8%8EInductive%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">transductive与Inductive的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%AD%E7%BB%83%E5%9B%BE%E6%A8%A1%E5%9E%8B%E7%9A%84loss%E6%9C%89%E5%93%AA%E4%BA%9B\"><span class=\"toc-text\">训练图模型的loss有哪些</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#graph-embedding%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">graph embedding的作用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">业务场景相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CVR%E7%9B%B8%E6%AF%94CTR%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%81%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">CVR相比CTR的区别、特点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E4%B8%8E%E6%8E%A8%E8%8D%90%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8C%E4%BD%A0%E8%AE%A4%E4%B8%BA%E5%93%AA%E4%B8%AA%E9%9A%BE%E5%BA%A6%E6%9B%B4%E5%A4%A7\"><span class=\"toc-text\">搜索与推荐的区别，你认为哪个难度更大</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%BF%E5%91%8A%E4%B8%8E%E6%8E%A8%E8%8D%90%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">广告与推荐的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E8%A7%84%E5%88%99%EF%BC%8C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E7%94%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">什么时候用规则，什么时候用模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E4%B8%8A%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%9C%80%E7%BB%88%E7%9A%84%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%86\"><span class=\"toc-text\">线上如何生成最终的排序得分</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E8%B4%9F%E6%A0%B7%E6%9C%AC%E4%BB%8B%E7%BB%8D%EF%BC%88%E8%A7%84%E6%A8%A1%E5%92%8C%E6%AF%94%E4%BE%8B%EF%BC%89%EF%BC%8C%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0%E8%B4%9F%E6%A0%B7%E6%9C%AC\"><span class=\"toc-text\">正负样本介绍（规模和比例），如何构造负样本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8E%E6%B4%BB%E7%94%A8%E6%88%B7%E7%89%B9%E5%BE%81%E7%A8%80%E7%96%8F%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">低活用户特征稀疏如何解决</span></a></li></ol></li></ol></li></ol>","author":{"name":"析构理想","slug":"blog-author","avatar":"https://s1.ax1x.com/2020/07/04/NxaLkV.jpg","link":"/tech","description":"在这个世界上，最让人畏惧的恰恰是通向自己的道路 <br /> @ <b>公众号：析构理想</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"Github":{"icon":"/svg/github.svg","link":"https://github.com/idealdestructor"},"Twitter":{"icon":"/svg/twitter.svg","link":"https://twitter.com/idealdestructor"},"Instgram":{"icon":"/svg/instagram.svg","link":"https://instagram.com/idealdestructor"},"Weibo":{"icon":"/svg/weibo.svg","link":"https://weibo.com/6019347563/profile"},"Zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/idealdestructor"},"Bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/305094533?spm_id_from=333.1007.0.0"}}}},"mapped":true,"prev_post":{"title":"前端面经总结","uid":"329c2025145e0b6d6215dadb590fe2d6","slug":"前端面试复习计划","date":"2022-01-04T03:02:15.000Z","updated":"2022-05-18T11:15:56.380Z","comments":true,"path":"api/articles/前端面试复习计划.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","text":"一、简历 简历在找工作过程中是非常非常重要的，无论你是什么途径去面试的，面试你的人一定会看你的简历。 推荐阅读：如何写「前端简历」，能敲开字节跳动的大门？一份优秀的前端开发工程师简历是怎么样的？ 1、重点 简历就像高考作文——阅卷时间非常短。 内容要简洁。 直击重点，表现出自己的...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"36 mins."},"categories":[{"name":"Frontend","slug":"Frontend","count":2,"path":"api/categories/Frontend.json"}],"tags":[{"name":"面经","slug":"面经","count":2,"path":"api/tags/面经.json"}],"author":{"name":"析构理想","slug":"blog-author","avatar":"https://s1.ax1x.com/2020/07/04/NxaLkV.jpg","link":"/tech","description":"在这个世界上，最让人畏惧的恰恰是通向自己的道路 <br /> @ <b>公众号：析构理想</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"Github":{"icon":"/svg/github.svg","link":"https://github.com/idealdestructor"},"Twitter":{"icon":"/svg/twitter.svg","link":"https://twitter.com/idealdestructor"},"Instgram":{"icon":"/svg/instagram.svg","link":"https://instagram.com/idealdestructor"},"Weibo":{"icon":"/svg/weibo.svg","link":"https://weibo.com/6019347563/profile"},"Zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/idealdestructor"},"Bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/305094533?spm_id_from=333.1007.0.0"}}}},"feature":false},"next_post":{}}